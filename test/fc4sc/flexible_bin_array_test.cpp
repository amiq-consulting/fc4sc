/******************************************************************************

   Copyright 2003-2018 AMIQ Consulting s.r.l.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

******************************************************************************/
/******************************************************************************
   Original Authors: Teodor Vasilache and Dragos Dospinescu,
                     AMIQ Consulting s.r.l. (contributors@amiq.com)

               Date: 2018-Oct-29
******************************************************************************/

#include "fc4sc.hpp"
#include "gtest/gtest.h"
#include <utility> // for std::swap

// lambda function returning a vector of N fibonacci numbers generated by starting with 1 and 2
auto fibonacci = [](size_t N) -> std::vector<int> {
  // start with 1 and 2, so that we don't have repeating elements
  int f0 = 1, f1 = 2;
  // resulting vector containing all
  std::vector<int> result(N, f0);

  for (size_t i = 1; i < N; i++) {
    std::swap(f0, f1);
    result[i] = f0;
    f1 += f0;
  }
  return result;
};
// returns the first N fibonacci intervals, starting with 1 and 2
// a fibonacci interval is an interval of form [f0+1, f1],
// where f0 and f1 are successive fibonacci numbers
auto fibonacci_intervals = [](size_t N) -> std::vector<fc4sc::interval_t<int>> {
  int f0 = 1, f1 = 2; // starting numbers
  std::vector<fc4sc::interval_t<int>> result(N, interval(f0, f1));

  for (size_t i = 1; i < N; i++) {
    std::swap(f0, f1);
    f1 += f0;
    result[i] = interval(f0+1, f1);
  }
  return result;
};

class flexible_bin_array_cvg: public covergroup {
private:
  int val = 0;
public:
  CG_CONS(flexible_bin_array_cvg) {};
  COVERPOINT(int, bin_array_cvp, val) {
    // this bin_array expands to 10 different bins for the following intervals
    // {[1:2], [3:3], [4:5], [6:8], [9:13], [14:21], [22:34], [35:55], [56:89], [90:144]}
    bin_array<int>("fibonacci_intervals", fibonacci_intervals(10)),
    // this bin_array expands to 5 different bins for values: 1, 2, 3, 5, 8
    bin_array<int>("fibonacci", fibonacci(5))
  };
  void sample(int val) { this->val = val; sample(); }
};

TEST(flexible_bin_array, base) {
  flexible_bin_array_cvg cvg;
  EXPECT_EQ(cvg.get_inst_coverage(), 0);
  // how much each bin weights in the overall coverage of the covergroup
  double bins_hit_weight = (100/15.0); // total 15 bins

  size_t total_bins_hit = 0;
  for (auto i : {1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144}) {
    switch (i) {
      case 1:
        total_bins_hit += 2;
        break;
      case 2:
        total_bins_hit += 1;
        break;
      case 3:
      case 5:
      case 8:
        total_bins_hit += 2;
        break;
      default:
        total_bins_hit += 1;
    }
    cvg.sample(i);  // hits 2 bins
    EXPECT_DOUBLE_EQ(cvg.get_inst_coverage(), bins_hit_weight * total_bins_hit);
  }
}
